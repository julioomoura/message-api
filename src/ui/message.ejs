<!doctype html>
<html lang="pt-br">
  <head>
    <meta charset="utf-8" />
    <title>Random Message</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      /*
  1. Use a more-intuitive box-sizing model.
*/
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }
      /*
  2. Remove default margin
*/
      * {
        margin: 0;
      }
      /*
  Typographic tweaks!
  3. Add accessible line-height
  4. Improve text rendering
*/
      body {
        line-height: 1.5;
        -webkit-font-smoothing: antialiased;
      }
      /*
  5. Improve media defaults
*/
      img,
      picture,
      video,
      canvas,
      svg {
        display: block;
        max-width: 100%;
      }
      /*
  6. Remove built-in form typography styles
*/
      input,
      button,
      textarea,
      select {
        font: inherit;
      }
      /*
  7. Avoid text overflows
*/
      p,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        overflow-wrap: break-word;
      }
      /*
  8. Create a root stacking context
*/
      #root,
      #__next {
        isolation: isolate;
      }

      .roboto-regular {
        font-family: "Roboto", sans-serif;
        font-weight: 400;
        font-style: normal;
      }

      body {
        font-family: Roboto;
      }

      .container {
        align-items: center;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        justify-content: center;
        gap: 1em;
      }

      .randomMessageArea {
        align-items: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 1em;
        margin-bottom: 1em;
      }

      .changeMessageArea {
        align-items: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 1em;
      }

      .inputArea {
        display: flex;
        justify-content: space-around;
        align-items: center;
        flex-direction: row;
        gap: 1em;
        width: 100%;
      }

      .buttonsArea {
        display: flex;
        justify-content: space-around;
        align-items: center;
        flex-direction: row;
        gap: 1em;
      }

      input[type="text"] {
        width: 20em;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      button {
        padding: 1em 2em;
        text-transform: uppercase;
        background-color: #1d4ed8;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      #refreshButton {
        width: 100%;
      }

      #desrandomizeButton {
        background-color: #047857;
      }

      #randomizeButton {
        background-color: #b91c1c;
      }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="container">
      <div class="randomMessageArea">
        <h1>This is a random message</h1>
        <p id="randomMessage"><%= message %></p>
        <button type="button" id="refreshButton">Refresh</button>
      </div>
      <div class="changeMessageArea">
        <div class="inputArea">
          <input
            type="text"
            name="newMessage"
            id="messageInput"
            placeholder="Cache a new message"
          />
        </div>
        <div class="buttonsArea">
          <button type="button" id="desrandomizeButton">Cache message</button>
          <button type="button" id="randomizeButton">
            Make it random again
          </button>
        </div>
      </div>
    </div>
  </body>
  <script async>
    const refreshButton = document.querySelector("#refreshButton");
    const randomizeButton = document.querySelector("#randomizeButton");
    const randomMessage = document.querySelector("#randomMessage");
    refreshButton.onclick = async () => {
      const newRandomMessage = await fetch("http://localhost:3000/messages", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((response) => response.json())
        .then((data) => {
          randomMessage.textContent = data.message;
        });
    };

    desrandomizeButton.onclick = async () => {
      const input = document.querySelector("input[id='messageInput']").value;
      const response = await fetch("http://localhost:3000/messages", {
        method: "POST",
        mode: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: input }),
      }).then((response) => {
        randomMessage.textContent = input;
      });
    };

    randomizeButton.onclick = async () => {
      const response = await fetch("http://localhost:3000/messages", {
        method: "DELETE",
        mode: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
      }).then((response) => {});
    };
  </script>
</html>
